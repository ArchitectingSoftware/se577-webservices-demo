import { DoesExtend, DeepMergeUnsafe, Not } from "../utils";
import { Any } from "./any";
import { Never, NeverType } from "./never";
import { Type } from "./type";
import { $Resolve } from "./resolve";
export declare type ObjectTypeId = "object";
export declare type _Object<V extends Record<string, Type> = {}, R extends string = never, P extends Type = Never> = _$Object<V, R, P>;
export declare type _$Object<V = {}, R = never, P = Never> = DoesExtend<true, {
    [key in Extract<R, string>]: key extends keyof V ? DoesExtend<V[key], NeverType> : DoesExtend<P, NeverType>;
}[Extract<R, string>]> extends true ? Never : {
    type: ObjectTypeId;
    values: V;
    required: R;
    isOpen: Not<DoesExtend<P, NeverType>>;
    openProps: P;
};
export declare type ObjectType = {
    type: ObjectTypeId;
    values: Record<string, Type>;
    required: string;
    isOpen: boolean;
    openProps: Type;
};
export declare type ObjectValues<O extends ObjectType> = O["values"];
export declare type ObjectValue<O extends ObjectType, K extends string> = K extends keyof ObjectValues<O> ? ObjectValues<O>[K] : IsObjectOpen<O> extends true ? ObjectOpenProps<O> : Never;
export declare type ObjectRequiredKeys<O extends ObjectType> = O["required"];
export declare type IsObjectOpen<O extends ObjectType> = O["isOpen"];
export declare type ObjectOpenProps<O extends ObjectType> = O["openProps"];
declare type IsObjectEmpty<O extends ObjectType> = DoesExtend<Extract<keyof ObjectValues<O>, keyof ObjectValues<O>>, never>;
export declare type ResolveObject<O extends ObjectType> = DeepMergeUnsafe<IsObjectOpen<O> extends true ? IsObjectEmpty<O> extends true ? {
    [key: string]: $Resolve<ObjectOpenProps<O>>;
} : {
    [key: string]: $Resolve<Any>;
} : {}, DeepMergeUnsafe<{
    [key in Exclude<keyof ObjectValues<O>, ObjectRequiredKeys<O>>]?: $Resolve<ObjectValues<O>[key]>;
}, {
    [key in ObjectRequiredKeys<O>]: key extends keyof ObjectValues<O> ? $Resolve<ObjectValues<O>[key]> : $Resolve<Any>;
}>>;
export {};
