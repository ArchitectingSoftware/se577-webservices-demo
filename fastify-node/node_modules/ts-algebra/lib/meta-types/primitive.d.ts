import { A } from "ts-toolbelt";
import { If } from "../utils";
import { Never } from "./never";
export declare type PrimitiveTypeId = "primitive";
export declare type Primitive<T extends null | boolean | number | string> = $Primitive<T>;
export declare type $Primitive<T> = If<A.Equals<T, never>, Never, {
    type: PrimitiveTypeId;
    value: T;
}>;
export declare type PrimitiveType = {
    type: PrimitiveTypeId;
    value: null | boolean | number | string;
};
export declare type PrimitiveValue<T extends PrimitiveType> = T["value"];
export declare type ResolvePrimitive<T extends PrimitiveType> = PrimitiveValue<T>;
