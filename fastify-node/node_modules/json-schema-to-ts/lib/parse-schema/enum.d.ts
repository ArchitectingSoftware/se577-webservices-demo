import { M } from "ts-algebra";
import { A } from "ts-toolbelt";
import { JSONSchema7 } from "../definitions";
import { HasKeyIn } from "../utils";
import { ParseSchema, ParseSchemaOptions } from "./index";
export declare type EnumSchema = JSONSchema7 & {
    enum: unknown[];
};
export declare type ParseEnumSchema<S extends EnumSchema, O extends ParseSchemaOptions> = HasKeyIn<S, "const" | "type"> extends true ? M.$Intersect<ParseEnum<S>, ParseSchema<Omit<S, "enum">, O>> : ParseEnum<S>;
declare type ParseEnum<S extends EnumSchema> = M.Enum<A.Compute<S["enum"][number]>>;
export {};
