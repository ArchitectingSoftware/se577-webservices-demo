// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: bc.proto

package BCGrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BCSolverClient is the client API for BCSolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BCSolverClient interface {
	BlockSolver(ctx context.Context, in *BcRequest, opts ...grpc.CallOption) (*BcResponse, error)
	BlockSolverAll(ctx context.Context, in *BcRequest, opts ...grpc.CallOption) (BCSolver_BlockSolverAllClient, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type bCSolverClient struct {
	cc grpc.ClientConnInterface
}

func NewBCSolverClient(cc grpc.ClientConnInterface) BCSolverClient {
	return &bCSolverClient{cc}
}

func (c *bCSolverClient) BlockSolver(ctx context.Context, in *BcRequest, opts ...grpc.CallOption) (*BcResponse, error) {
	out := new(BcResponse)
	err := c.cc.Invoke(ctx, "/BCGrpc.BCSolver/BlockSolver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bCSolverClient) BlockSolverAll(ctx context.Context, in *BcRequest, opts ...grpc.CallOption) (BCSolver_BlockSolverAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &BCSolver_ServiceDesc.Streams[0], "/BCGrpc.BCSolver/BlockSolverAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &bCSolverBlockSolverAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BCSolver_BlockSolverAllClient interface {
	Recv() (*BcResponse, error)
	grpc.ClientStream
}

type bCSolverBlockSolverAllClient struct {
	grpc.ClientStream
}

func (x *bCSolverBlockSolverAllClient) Recv() (*BcResponse, error) {
	m := new(BcResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bCSolverClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/BCGrpc.BCSolver/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BCSolverServer is the server API for BCSolver service.
// All implementations must embed UnimplementedBCSolverServer
// for forward compatibility
type BCSolverServer interface {
	BlockSolver(context.Context, *BcRequest) (*BcResponse, error)
	BlockSolverAll(*BcRequest, BCSolver_BlockSolverAllServer) error
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedBCSolverServer()
}

// UnimplementedBCSolverServer must be embedded to have forward compatible implementations.
type UnimplementedBCSolverServer struct {
}

func (UnimplementedBCSolverServer) BlockSolver(context.Context, *BcRequest) (*BcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockSolver not implemented")
}
func (UnimplementedBCSolverServer) BlockSolverAll(*BcRequest, BCSolver_BlockSolverAllServer) error {
	return status.Errorf(codes.Unimplemented, "method BlockSolverAll not implemented")
}
func (UnimplementedBCSolverServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBCSolverServer) mustEmbedUnimplementedBCSolverServer() {}

// UnsafeBCSolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BCSolverServer will
// result in compilation errors.
type UnsafeBCSolverServer interface {
	mustEmbedUnimplementedBCSolverServer()
}

func RegisterBCSolverServer(s grpc.ServiceRegistrar, srv BCSolverServer) {
	s.RegisterService(&BCSolver_ServiceDesc, srv)
}

func _BCSolver_BlockSolver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCSolverServer).BlockSolver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BCGrpc.BCSolver/BlockSolver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCSolverServer).BlockSolver(ctx, req.(*BcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BCSolver_BlockSolverAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BcRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BCSolverServer).BlockSolverAll(m, &bCSolverBlockSolverAllServer{stream})
}

type BCSolver_BlockSolverAllServer interface {
	Send(*BcResponse) error
	grpc.ServerStream
}

type bCSolverBlockSolverAllServer struct {
	grpc.ServerStream
}

func (x *bCSolverBlockSolverAllServer) Send(m *BcResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BCSolver_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCSolverServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BCGrpc.BCSolver/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCSolverServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BCSolver_ServiceDesc is the grpc.ServiceDesc for BCSolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BCSolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BCGrpc.BCSolver",
	HandlerType: (*BCSolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BlockSolver",
			Handler:    _BCSolver_BlockSolver_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _BCSolver_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BlockSolverAll",
			Handler:       _BCSolver_BlockSolverAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bc.proto",
}
